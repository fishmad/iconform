<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use Illuminate\Support\Facades\Gate;
use DummyRootNamespace{{modelNamespace}}{{modelName}};
use DB;
use Yajra\Datatables\Datatables;
use Illuminate\Http\Request;

class DummyClass extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        // if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_browse_list'))) {
        //   return abort(401);
        // }

        $columns = ['id', 'name', 'date'];
        //${{crudName}} = {{modelName}}::all();

        ${{crudName}} = DB::getSchemaBuilder()->getColumnListing('{{crudName}}');

        return view('{{viewPath}}{{viewName}}.index', compact('columns', '{{crudName}}'));
    }


    public function datatables()
    {
        if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_browse_list'))) {
          return abort(401);
        }

        // ${{crudName}} = {{crudName}}::select(['id', 'name', 'updated_at']);
        ${{crudName}} = {{modelName}}::all();

        return Datatables::of(${{crudName}})

        // ->editColumn('title', function(${{crudName}}) {
        //   $url = route('app.registers.{{crudName}}.show', ${{crudName}}->id);
        //   return '<a href="' . $url . '">' . ${{crudName}}->title . '</a>';
        // })
        ->rawColumns(['name', 'action'])
        ->addColumn('action', function (${{crudName}}) {
          return view('{{crudName}}.includes.actionButtons', compact('{{crudName}}'))->render();
        })
        ->make(true);
    }


    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_add_create'))) {
          return abort(401);
        }
        return view('{{viewPath}}{{viewName}}.create');
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_add_create'))) {
          return abort(401);
        }
        $this->validate($request, [
          'name' => 'required'
        ]);

        $requestData = $request->all();
        {{modelName}}::create($requestData);

        return redirect('{{routeGroup}}{{viewName}}')->with('success', '{{modelName}} added!');
    }


    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_read_show'))) {
          return abort(401);
        }
        ${{crudName}} = {{modelName}}::findOrFail($id);

        return view('{{viewPath}}{{viewName}}.show', compact('{{crudName}}'));
    }


    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_edit_update'))) {
          return abort(401);
        }
        ${{crudName}} = {{modelName}}::findOrFail($id);

        return view('{{viewPath}}{{viewName}}.edit', compact('{{crudName}}'));
    }


    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, $id)
    {
        if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_add_create'))) {
          return abort(401);
        }

        $this->validate($request, [
          'name' => 'required'
        ]);
        
        ${{crudName}} = {{modelName}}::findOrFail($id);
        ${{crudName}}->update($request->all());

        return redirect(route('{{routeGroup}}{{viewName}}'))->withSuccess('{{modelName}} was updated!');
    }


     /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
        if ((!Gate::allows('{{crudName}}_all')) && (!Gate::allows('{{crudName}}_delete_destroy'))) {
          return abort(401);
        }

        ${{crudName}} = {{modelName}}::findOrFail($id);
        {{modelName}}::destroy($id);

        return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} deleted!');
    }


}
